# Example plan for DSE_GKE run


Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  ~ update in-place
+/- create replacement and then destroy

Terraform will perform the following actions:

  # module.k8s.module.dse_deployment.kubernetes_deployment_v1.deployment will be updated in-place
  # (imported from "default/dse-deployment")
  ~ resource "kubernetes_deployment_v1" "deployment" {
        id               = "default/dse-deployment"
      + wait_for_rollout = true

        metadata {
            annotations      = {}
            generate_name    = null
            generation       = 472
            labels           = {}
            name             = "dse-deployment"
            namespace        = "default"
            resource_version = "322869632"
            uid              = "66f0f85f-39f1-4dd9-a72d-8157e80596ac"
        }

      ~ spec {
            min_ready_seconds         = 0
            paused                    = false
          ~ progress_deadline_seconds = 600 -> 1500
            replicas                  = "1"
            revision_history_limit    = 10

            selector {
                match_labels = {
                    "app" = "dse"
                }
            }

          ~ strategy {
                type = "RollingUpdate"

              ~ rolling_update {
                  ~ max_surge       = "25%" -> "100%"
                  ~ max_unavailable = "25%" -> "0"
                }
            }

          ~ template {
              ~ metadata {
                    annotations      = {}
                    generate_name    = null
                    generation       = 0
                  ~ labels           = {
                        "app"       = "dse"
                      + "glean-app" = "True"
                    }
                    name             = null
                    namespace        = null
                    resource_version = null
                    uid              = null
                }
              ~ spec {
                    active_deadline_seconds          = 0
                  ~ automount_service_account_token  = false -> true
                    dns_policy                       = "ClusterFirst"
                  ~ enable_service_links             = false -> true
                    host_ipc                         = false
                    host_network                     = false
                    host_pid                         = false
                    hostname                         = null
                    node_name                        = null
                  ~ node_selector                    = {
                      - "glean.com/node-pool-selector" = "nodegroup-r6a_xlarge" -> null
                    }
                    priority_class_name              = null
                    restart_policy                   = "Always"
                    runtime_class_name               = null
                    scheduler_name                   = "default-scheduler"
                    service_account_name             = "datasource-events"
                    share_process_namespace          = false
                    subdomain                        = null
                  ~ termination_grace_period_seconds = 150 -> 60

                  + affinity {
                      + node_affinity {
                          + preferred_during_scheduling_ignored_during_execution {
                              + weight = 4

                              + preference {
                                  + match_expressions {
                                      + key      = "eks.amazonaws.com/nodegroup"
                                      + operator = "In"
                                      + values   = [
                                          + "memory-based-small-nodegroup",
                                        ]
                                    }
                                }
                            }
                          + preferred_during_scheduling_ignored_during_execution {
                              + weight = 3

                              + preference {
                                  + match_expressions {
                                      + key      = "eks.amazonaws.com/nodegroup"
                                      + operator = "In"
                                      + values   = [
                                          + "memory-based-medium-nodegroup",
                                        ]
                                    }
                                }
                            }
                          + preferred_during_scheduling_ignored_during_execution {
                              + weight = 2

                              + preference {
                                  + match_expressions {
                                      + key      = "eks.amazonaws.com/nodegroup"
                                      + operator = "In"
                                      + values   = [
                                          + "memory-based-large-nodegroup",
                                        ]
                                    }
                                }
                            }
                          + preferred_during_scheduling_ignored_during_execution {
                              + weight = 1

                              + preference {
                                  + match_expressions {
                                      + key      = "eks.amazonaws.com/nodegroup"
                                      + operator = "In"
                                      + values   = [
                                          + "memory-based-xlarge-nodegroup",
                                        ]
                                    }
                                }
                            }
                          + required_during_scheduling_ignored_during_execution {
                              + node_selector_term {
                                  + match_expressions {
                                      + key      = "use"
                                      + operator = "In"
                                      + values   = [
                                          + "memory-based-workload",
                                        ]
                                    }
                                }
                            }
                        }
                    }

                  ~ container {
                        args                       = []
                        command                    = []
                      ~ image                      = "518642952506.dkr.ecr.us-east-1.amazonaws.com/datasource-events@sha256:b51b72e75c3ad9bf23152bee0ddca154fc22a322e09844d0102a9faad47e59fb" -> "518642952506.dkr.ecr.us-east-1.amazonaws.com/datasource-events@sha256:06cec08b5807bcd62e73931d01db15ebcdb6ee7fa171c3597bd4ffc614e51369"
                        image_pull_policy          = "Always"
                        name                       = "dse"
                        stdin                      = false
                        stdin_once                 = false
                        termination_message_path   = "/dev/termination-log"
                        termination_message_policy = "File"
                        tty                        = false
                        working_dir                = null

                      ~ env {
                          ~ name  = "GOOGLE_CLOUD_PROJECT" -> "AWS_ACCOUNT_ID"
                          ~ value = "aws-connector-glean-dev-2" -> "761376532301"
                        }
                      ~ env {
                          ~ name  = "ENVIRONMENT" -> "AWS_DEFAULT_REGION"
                          ~ value = "PRODUCTION" -> "us-west-1"
                        }
                      ~ env {
                          ~ name  = "GLEAN_SERVICE_PLATFORM" -> "AWS_REGION"
                          ~ value = "EKS" -> "us-west-1"
                        }
                        env {
                            name  = "CLOUD_PLATFORM"
                            value = "AWS"
                        }
                      ~ env {
                          ~ name  = "AWS_ACCOUNT_ID" -> "ENVIRONMENT"
                          ~ value = "761376532301" -> "PRODUCTION"
                        }
                      ~ env {
                          ~ name  = "AWS_REGION" -> "GLEAN_SERVICE_PLATFORM"
                          ~ value = "us-west-1" -> "EKS"
                        }
                      ~ env {
                          ~ name  = "ROLLOUT_ID" -> "GOOGLE_CLOUD_PROJECT"
                          ~ value = "2024-07-17 10:34:49.942882-07:00" -> "aws-connector-glean-dev-2"
                        }
                      ~ env {
                          ~ name  = "GAE_SERVICE__GKE_COMPATIBILITY" -> "EKS_NODE_NAME"
                          - value = "default" -> null

                          + value_from {
                              + field_ref {
                                  + api_version = "v1"
                                  + field_path  = "spec.nodeName"
                                }
                            }
                        }
                      ~ env {
                          ~ name  = "PROFILER_SERVICE_NAME" -> "EKS_POD_NAME"
                          - value = "dse_eks" -> null

                          + value_from {
                              + field_ref {
                                  + api_version = "v1"
                                  + field_path  = "metadata.name"
                                }
                            }
                        }
                      ~ env {
                          ~ name  = "EKS_CONTAINER_NAME" -> "EKS_POD_NAMESPACE"
                          - value = "dse" -> null

                          + value_from {
                              + field_ref {
                                  + api_version = "v1"
                                  + field_path  = "metadata.namespace"
                                }
                            }
                        }
                      ~ env {
                          ~ name  = "EKS_NODE_NAME" -> "INSTANCE_ID"
                            value = null

                          ~ value_from {
                              ~ field_ref {
                                    api_version = "v1"
                                  ~ field_path  = "spec.nodeName" -> "metadata.name"
                                }
                            }
                        }
                      ~ env {
                          ~ name  = "EKS_POD_NAME" -> "EKS_CONTAINER_NAME"
                          + value = "dse"

                          - value_from {
                              - field_ref {
                                  - api_version = "v1" -> null
                                  - field_path  = "metadata.name" -> null
                                }
                            }
                        }
                      ~ env {
                          ~ name  = "EKS_POD_NAMESPACE" -> "GAE_SERVICE__GKE_COMPATIBILITY"
                          + value = "dse"

                          - value_from {
                              - field_ref {
                                  - api_version = "v1" -> null
                                  - field_path  = "metadata.namespace" -> null
                                }
                            }
                        }
                      ~ env {
                          ~ name  = "INSTANCE_ID" -> "PROFILER_SERVICE_NAME"
                          + value = "dse"

                          - value_from {
                              - field_ref {
                                  - api_version = "v1" -> null
                                  - field_path  = "metadata.name" -> null
                                }
                            }
                        }

                      ~ liveness_probe {
                          ~ failure_threshold     = 3 -> 2
                            initial_delay_seconds = 0
                            period_seconds        = 30
                            success_threshold     = 1
                            timeout_seconds       = 10

                            http_get {
                                host   = null
                                path   = "/liveness_check"
                                port   = "8080"
                                scheme = "HTTP"
                            }
                        }

                        port {
                            container_port = 8080
                            host_ip        = null
                            host_port      = 0
                            name           = null
                            protocol       = "TCP"
                        }

                      ~ readiness_probe {
                          ~ failure_threshold     = 3 -> 2
                            initial_delay_seconds = 0
                            period_seconds        = 30
                            success_threshold     = 1
                            timeout_seconds       = 10

                            http_get {
                                host   = null
                                path   = "/readiness_check"
                                port   = "8080"
                                scheme = "HTTP"
                            }
                        }

                        resources {
                            limits   = {
                                "cpu"    = "1500m"
                                "memory" = "7Gi"
                            }
                            requests = {
                                "cpu"    = "700m"
                                "memory" = "3Gi"
                            }
                        }

                        startup_probe {
                            failure_threshold     = 15
                            initial_delay_seconds = 0
                            period_seconds        = 60
                            success_threshold     = 1
                            timeout_seconds       = 30

                            http_get {
                                host   = null
                                path   = "/readiness_check"
                                port   = "8080"
                                scheme = "HTTP"
                            }
                        }
                    }

                    toleration {
                        effect             = "NoSchedule"
                        key                = "glean-app"
                        operator           = "Equal"
                        toleration_seconds = null
                        value              = "True"
                    }
                  + toleration {
                      + effect   = "NoSchedule"
                      + key      = "memory-based-workload"
                      + operator = "Equal"
                      + value    = "True"
                    }
                }
            }
        }

      + timeouts {
          + create = "25m"
          + update = "25m"
        }
    }

  # module.k8s.module.dse_deployment.kubernetes_horizontal_pod_autoscaler_v2.hpa will be updated in-place
  # (imported from "default/dse-hpa")
  ~ resource "kubernetes_horizontal_pod_autoscaler_v2" "hpa" {
        id = "default/dse-hpa"

        metadata {
            annotations      = {}
            generate_name    = null
            generation       = 0
            labels           = {}
            name             = "dse-hpa"
            namespace        = "default"
            resource_version = "325239633"
            uid              = "51238d68-1226-4641-b69f-0cbd3165e241"
        }

      ~ spec {
            max_replicas                      = 20
            min_replicas                      = 1
            target_cpu_utilization_percentage = 0

          + behavior {
              + scale_down {
                  + select_policy                = "Max"
                  + stabilization_window_seconds = 900

                  + policy {
                      + period_seconds = 15
                      + type           = "Percent"
                      + value          = 100
                    }
                }
              + scale_up {
                  + select_policy                = "Max"
                  + stabilization_window_seconds = 300

                  + policy {
                      + period_seconds = 15
                      + type           = "Percent"
                      + value          = 100
                    }
                  + policy {
                      + period_seconds = 15
                      + type           = "Pods"
                      + value          = 5
                    }
                }
            }

            metric {
                type = "Resource"

                resource {
                    name = "cpu"

                    target {
                        average_utilization = 90
                        average_value       = null
                        type                = "Utilization"
                        value               = null
                    }
                }
            }

            scale_target_ref {
                api_version = "apps/v1"
                kind        = "Deployment"
                name        = "dse-deployment"
            }
        }
    }

  # module.k8s.module.dse_deployment.kubernetes_pod_disruption_budget_v1.pdb will be imported
    resource "kubernetes_pod_disruption_budget_v1" "pdb" {
        id = "default/dse-pdb"

        metadata {
            annotations      = {}
            generate_name    = null
            generation       = 1
            labels           = {}
            name             = "dse-pdb"
            namespace        = "default"
            resource_version = "322871832"
            uid              = "ad24ecad-3876-45b5-b3b5-b1918f616042"
        }

        spec {
            max_unavailable = null
            min_available   = "1"

            selector {
                match_labels = {
                    "app" = "dse"
                }
            }
        }
    }

  # module.k8s.module.dse_deployment.kubernetes_service_v1.service will be updated in-place
  # (imported from "default/dse-service")
  ~ resource "kubernetes_service_v1" "service" {
        id                     = "default/dse-service"
        status                 = [
            {
                load_balancer = [
                    {
                        ingress = []
                    },
                ]
            },
        ]
      + wait_for_load_balancer = false

        metadata {
            annotations      = {}
            generate_name    = null
            generation       = 0
            labels           = {
                "app" = "dse"
            }
            name             = "dse-service"
            namespace        = "default"
            resource_version = "297368233"
            uid              = "5caf4338-4d6c-4d7b-bd06-7191505834cf"
        }

      ~ spec {
            allocate_load_balancer_node_ports = true
            cluster_ip                        = "172.20.46.56"
            cluster_ips                       = [
                "172.20.46.56",
            ]
            external_ips                      = []
            external_name                     = null
          ~ external_traffic_policy           = "Local" -> "Cluster"
            health_check_node_port            = 0
            internal_traffic_policy           = "Cluster"
            ip_families                       = [
                "IPv4",
            ]
            ip_family_policy                  = "SingleStack"
            load_balancer_class               = null
            load_balancer_ip                  = null
            load_balancer_source_ranges       = []
            publish_not_ready_addresses       = false
            selector                          = {
                "app" = "dse"
            }
            session_affinity                  = "None"
            type                              = "NodePort"

            port {
                app_protocol = null
                name         = null
                node_port    = 30602
                port         = 80
                protocol     = "TCP"
                target_port  = "8080"
            }
        }
    }

  # module.k8s.module.sql.kubernetes_job.deploy_job must be replaced
+/- resource "kubernetes_job" "deploy_job" {
      ~ id                  = "deploy-jobs/sql-rabbitmq-task-push-full-tf" -> (known after apply)
        # (1 unchanged attribute hidden)

      ~ metadata {
          - annotations      = {} -> null
          ~ generation       = 1 -> (known after apply)
          ~ labels           = {} -> (known after apply)
          ~ name             = "sql-rabbitmq-task-push-full-tf" -> "sql-latest" # forces replacement
          ~ resource_version = "324279083" -> (known after apply)
          ~ uid              = "e4c2ccea-8f21-4454-8d84-3332a81b4f05" -> (known after apply)
            # (2 unchanged attributes hidden)
        }

      ~ spec {
          - active_deadline_seconds    = 0 -> null
          ~ completion_mode            = "NonIndexed" -> (known after apply)
          - manual_selector            = false -> null
            # (4 unchanged attributes hidden)

          - selector {
            }

          ~ template {
              ~ metadata {
                  - annotations      = {} -> null
                  ~ generation       = 0 -> (known after apply)
                  - labels           = {} -> null
                  + name             = (known after apply)
                  + resource_version = (known after apply)
                  + uid              = (known after apply)
                    # (1 unchanged attribute hidden)
                }
              ~ spec {
                  - active_deadline_seconds          = 0 -> null
                  + hostname                         = (known after apply)
                  + node_name                        = (known after apply)
                  ~ scheduler_name                   = "default-scheduler" -> (known after apply)
                    # (14 unchanged attributes hidden)

                  ~ container {
                      ~ args                       = [
                            # (1 unchanged element hidden)
                            "--operation=SQL",
                          ~ "--tag=rabbitmq-task-push-full-tf" -> "--tag=latest",
                            "--scio_instance=aws-glean-dev-2",
                            # (2 unchanged elements hidden)
                        ]
                      - command                    = [] -> null
                      ~ image                      = "518642952506.dkr.ecr.us-east-1.amazonaws.com/aws_deploy@sha256:e3abf98bf8a3fa0e19611665209c4c32112dca946ba98a9c0b59751af4e65c30" -> "518642952506.dkr.ecr.us-east-1.amazonaws.com/aws_deploy@sha256:0b235be598f8d2ced47258edc47d6b52102a57bafeddf6b2844ed10196d608da"
                      ~ image_pull_policy          = "IfNotPresent" -> (known after apply)
                        name                       = "deploy"
                      ~ termination_message_policy = "File" -> (known after apply)
                        # (5 unchanged attributes hidden)

                      ~ resources {
                          ~ limits   = {
                              ~ "cpu"    = "1" -> "1000m"
                                # (1 unchanged element hidden)
                            }
                            # (1 unchanged attribute hidden)
                        }

                        # (15 unchanged blocks hidden)
                    }

                    # (1 unchanged block hidden)
                }
            }
        }

        # (1 unchanged block hidden)
    }

Plan: 4 to import, 1 to add, 3 to change, 1 to destroy.

Warning: Resource targeting is in effect